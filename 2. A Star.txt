========================================= Program ===========================================



def accept(n):
	puz = []
	for i in range(n):
		puz.append([val for val in input().split()])
	return puz
def print_board(board,n):
	for i in range(n):
		print()
		for j in range(n):
			print(board[i][j],end=' ')
#Find the position of blank space 
def find_space(Current,n):
		for blank_row_pos in range(n):
			for blank_col_pos in range(n):
				if Current[blank_row_pos][blank_col_pos]=='_':
					return blank_row_pos,blank_col_pos
#Copy the current node to new node for shuffling the blank space and create a new configuration
def copy_current(Current):
	temp=[]
	for i in range(len(Current)):
		row=[]
		for val in Current[i]:
			row.append(val)	
		temp.append(row)
	return(temp)
#Move the blank space in given direction, if out of range return None
def shuffle(Current,brow_pos,bcol_pos,move_x,move_y):
	if move_x >= 0 and move_x < len(Current) and move_y >= 0 and move_y < len(Current):
		temp=[]
		temp=copy_current(Current)
		change=temp[move_x][move_y]
		temp[move_x][move_y]=temp[brow_pos][bcol_pos]
		temp[brow_pos][bcol_pos]=change
		return temp
	else:
		return None

#Function to calculate g_score: the number of nodes traversed from a start node to get to the current node
def g_score(Node):
	
	return Node[1] #Node=[Board,level,fscore]
#Function to calculate h_score: the number of misplaced tiles by comparing the current state and the goal state 
def h_score(Current,Goal,n):
	hscore=0
	for i in range(n):
		for j in range(n):
			if (Current[i][j] != Goal[i][j]) and (Current[i][j]!='_'):
				hscore +=1
	return hscore
#Function to calculate f_Score= g_score + h_Score
def f_score(Node,Goal,n):
	Current=Node[0]
	return g_score(Node) + h_score(Current,Goal,n)


#Generate the child nodes by moving the black in any four direction (up,down,left,right)
def move_gen(Node,Goal,n):
	Current=Node[0]
	level=Node[1]
	fscore=0
	row,col=find_space(Current,n)
	move_positions=[[row,col-1],[row,col+1],[row-1,col],[row+1,col]] #left,right,up,down
	children=[] #List of child nodes of current node
	for move in move_positions:
		child=shuffle(Current,row,col,move[0],move[1])
		if child is not None:
			cNode=[child,0,0] #Dummy node for calculating f_Score
			fscore=f_score(cNode,Goal,n)
			Node=[child,level+1,fscore]
			children.append(Node)
	print("\n\n The Children ::",children)

	return children
#Function goal_test to see the goal configuration is reached
def goal_test(Current,Goal,n):
	if h_score(Current,Goal,n) == 0:
		return True
	else:
		return False
#Function to Sort OPEN based on f_score
def sort(L):

	L.sort(key = lambda x: x[2],reverse=False)
	return L 

#Function for starting the Game
def play_game(Start, Goal, n):

	#when game starts
	fscore=0 #fscore initialized to zero
	gscore=0 #gscore initialized to zero
	level=0 #the start configuration is root node s at level-0 of the state space tree
	Node=[Start,level,fscore]
	fscore=f_score(Node,Goal,n)
	#Every Node is [board configuration ,level,gscore]
	Node = [Start,level,fscore] # current node is Start node
	print("\nThe Node is=\n",Node)
	OPEN = [] #OPEN list as frontier
	CLOSED = [] #CLOSED as explored 
	OPEN.append(Node)
	levelcount=0
	#Explored the current node to reach to the Goal configuration
	while True:	

		N=OPEN[0] #first node of open
		del OPEN[0] # delete first node of open	
		Current=N[0] #Extract board configuration
		print("\n\n The current configuration is ::",Current)
		CLOSED.append(N)
		#if goal configuration is reached terminate
		if goal_test(Current,Goal,n) == True:
			print("\nGoal reached!!")
			print("CLOSED=",CLOSED)
			break
	
		CHILD=move_gen(N,Goal,n)
		#print("\n\n The CHILD is ::",CHILD)
		OPEN=[]
		for child in CHILD:
			OPEN.append(child)
		#sort the OPEN list based on fscore value of each node

		sort(OPEN) 
#Drive Code
n=int(input("Enter the board size:"))
print("\nEnter Start Configuration of board")
Start=accept(n)
print("\nEnter Goal Configuration of board")
Goal=accept(n)
play_game(Start, Goal, n)





=================================================== 2nd Code ==========================================


class Node:
    def __init__(self, data, level, fval):
        """ Initialize the node with the data, level of the node and the calculated fvalue """
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        """ Generate child nodes from the given node by moving the blank space
            either in the four directions {up,down,left,right} """
        x, y = self.find(self.data, '_')
        """ val_list contains position values for moving the blank space in either of
            the 4 directions [up,down,left,right] respectively. """
        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level + 1, 0)
                children.append(child_node)
        return children

    def shuffle(self, puz, x1, y1, x2, y2):
        """ Move the blank space in the given direction and if the position value are out
            of limits the return None """
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):
            temp_puz = []
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None

    def copy(self, root):
        """ Copy function to create a similar matrix of the given node"""
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp

    def find(self, puz, x):
        """ Specifically used to find the position of the blank space """
        for i in range(0, len(self.data)):
            for j in range(0, len(self.data)):
                if puz[i][j] == x:
                    return i, j


class Puzzle:
    def __init__(self, size):
        """ Initialize the puzzle size by the specified size,open and closed lists to empty """
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        """ Accepts the puzzle from the user """
        puz = []
        for i in range(0, self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self, start, goal):
        """ Heuristic Function to calculate hueristic value f(x) = h(x) + g(x) """
        return self.h(start.data, goal) + start.level

    def h(self, start, goal):
        """ Calculates the different between the given puzzles """
        temp = 0
        for i in range(0, self.n):
            for j in range(0, self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp

    def process(self):
        """ Accept Start and Goal Puzzle state"""
        print("Enter the start state matrix \n")
        start = self.accept()
        print("Enter the goal state matrix \n")
        goal = self.accept()

        start = Node(start, 0, 0)
        start.fval = self.f(start, goal)
        """ Put the start node in the open list"""
        self.open.append(start)
        print("\n\n")
        while True:
            cur = self.open[0]
            print("")
            print("  | ")
            print("  | ")
            print(" \\\'/ \n")
            for i in cur.data:
                for j in i:
                    print(j, end=" ")
                print("")
            """ If the difference between current and goal node is 0 we have reached the goal node"""
            if (self.h(cur.data, goal) == 0):
                break
            for i in cur.generate_child():
                i.fval = self.f(i, goal)
                self.open.append(i)
            self.closed.append(cur)
            del self.open[0]

            """ sort the opne list based on f value """
            self.open.sort(key=lambda x: x.fval, reverse=False)
puz = Puzzle(3)
puz.process()




================================================== THEORY =============================================


A* Algorithm
 
A* (pronounced as "A star") is a computer algorithm that is widely used in path finding and graph traversal. However, the A* algorithm introduces a    heuristic into a regular graph-searching  algorithm, essentially planning ahead at each step so a more optimal decision is made. 
A* is an extension of Dijkstra's algorithm with some characteristics of breadth-first 
search (BFS). 
A* uses a function f(n) that gives an estimate of the total cost of a path using that  node. Therefore, A* is a heuristic function, which differs from an algorithm in that a heuristic is more of an estimate and is not necessarily provably correct.

Algorithm

   Step 1: Place the starting node into OPEN and find its f (n) value.
   Step 2: Remove the node from OPEN, having smallest f (n) value. If it is a goal node then stop and return success.
   Step 3: Else remove the node from OPEN, find all its successors.
   Step 4: Find the f (n) value of all successors; place them into OPEN and place the removed node into CLOSE.
   Step 5: Go to Step-2.
   Step 6: Exit.

Advantages of A*

   1. It is complete and optimal.
   2. It is the best one from other techniques. It is used to solve very complex problems.
   3. It is optimally efficient, i.e. there is no other optimal algorithm guaranteed to expand fewer nodes than A*.

Disadvantages of A*

   1. This algorithm is complete if the branching factor is finite and every action has fixed cost.
   2. The speed execution of A* search is highly dependant on the accuracy of the heuristic algorithm that is used to compute h (n).

Application:

   A* Algorithm is used in various diversified areas of research, computer network,
   game search problem & graph, Google maps to find the shortest path between source and 
   destination.
======================================================================================================================================================