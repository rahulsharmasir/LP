=============================== PROGRAM =========================================================



graph = {  '5' : ['3','7'], '3' : ['2', '4'], '7' : ['8'], '2' : [], '4' : ['8'], '8' : []}
#Breadth-First Search
visited = [] # List for visited nodes.
queue = []     #Initialize a queue
def bfs(visited, graph, node): #function for BFS
      visited.append(node)
      queue.append(node)
      while queue:          # Creating loop to visit each node
              m = queue.pop(0) 
              print (m, end = "\n") 
              for neighbour in graph[m]:
                  if neighbour not in visited:
                        visited.append(neighbour)
                        queue.append(neighbour)
#  Depth-First Search
visited1 = set() # Set to keep track of visited nodes of graph.
def dfs(visited1, graph, node):  #function for dfs 
      if node not in visited1:
            print (node)
            visited1.add(node)
            for neighbour in graph[node]:
                  dfs(visited1, graph, neighbour)

flag=1
while flag==1:
    print("1. Breadth-First Search \n2. Depth-First Search\n3. Exit\n")
    ch=int(input("Enter your Choice (from 1 to 3) :"))
    if ch==1:
        print("Following is the Breadth-First Search:")
        bfs(visited, graph, '5')    # function calling
        a = input("Do you want to continue (y/n) :")
        if a == "y":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")
    elif ch==2:
        print("Following is the Depth-First Search:")
        dfs(visited1, graph, '5')
        a = input("Do you want to continue (y/n) :")
        if a == "y":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==3:
        flag=0
        print("Thanks for using this program!")
    else:
        print("!!Wrong Choice!! ")
        a=input("Do you want to continue (y/n) :")
        if a=="y":
            flag=1
        else:
            flag=0
            print("Thanks for using this program!")



=========================================== THEORY =====================================


1) Depth First Search
   
   The Depth-First Search is a recursive algorithm that uses the concept of backtracking.
   It involves thorough searches of all the nodes by going ahead if potential, else by
   backtracking. Here, the word backtrack means once you are moving forward and there are not
   any more nodes along the present path, you progress backward on an equivalent path to seek
   out nodes to traverse. All the nodes are progressing to be visited on the current path until all
   the unvisited nodes are traversed after which subsequent paths are going to be selected.

DFS Algorithm:
   
   The DSF algorithm follows as:
   1. We will start by putting any one of the graph's vertex on top of the stack.
   2. After that take the top item of the stack and add it to the visited list of the vertex.
   3. Next, create a list of that adjacent node of the vertex. Add the ones which aren't in the
      visited list of vertexes to the top of the stack.
   4. Lastly, keep repeating steps 2 and 3 until the stack is empty
   
Advantages of DFS:

   1. Simplicity: DFS is a straightforward algorithm to understand and implement.
   2. Memory Efficiency: DFS explores the graph depth-first, which means it only needs to store the nodes along the current path.
   3. Space Efficiency: DFS is space-efficient as it only requires a small amount of additional memory to keep track of visited nodes and the stack.
   4. Early Solution: DFS can find a solution relatively quickly if the target node is closer to the start node. 
   5. Detecting Cycles: DFS can be used to detect cycles in a graph.

Disadvantages of DFS:

   1. Completeness: DFS may not find a solution if the graph contains infinite branches or cycles.
   2. Time complexity: In the worst case, DFS can have a time complexity of O(b^d), where "b" is the branching factor and "d" is the depth of the graph.
   3. Space complexity: DFS typically uses recursion to implement the backtracking mechanism, which can lead to high space complexity.
   4. Non-optimal solutions: DFS does not guarantee finding the shortest path or the optimal solution.
   5. Lack of breadth-first exploration: DFS prioritizes exploring a single branch as deeply as possible before moving to the next one.

Application of DFS Algorithm

   1. For finding the path
   2. To test if the graph is bipartite
   3. For finding the strongly connected components of a graph
   4. For detecting cycles in a graph.


2) Breath First Search
 
   Breadth-First Search (BFS) is an algorithm used for traversing graphs or trees.
   Traversing means visiting each node of the graph. Breadth-First Search is a recursive
   algorithm to search all the vertices of a graph or a tree. BFS in python can be implemented by
   using data structures like a dictionary and lists.

BFS Algorithm

   The steps of the algorithm work as follow:
   1. Start by putting any one of the graphâ€™s vertices at the back of the queue.
   2. Now take the front item of the queue and add it to the visited list.
   3. Create a list of that vertex's adjacent nodes. Add those which are not within the visited list
      to the rear of the queue.
   4. Keep continuing steps two and three till the queue is empty.

Advantages of BFS

   1. It can be useful in order to find whether the graph has connected components or not.
   2. It always finds or returns the shortest path if there is more than one path between two
      vertices.

Disadvantages of BFS

   1. The execution time of this algorithm is very slow because the time complexity of this
      algorithm is exponential.
   2. This algorithm is not useful when large graphs are used.

Application od BFS

   1. Using GPS navigation system BFS is used to find neighboring places.
   2. In networking, when we want to broadcast some packets, we use the BFS algorithm.
   3. Path finding algorithm is based on BFS.
   4. BFS is used in Ford-Fulkerson algorithm to find maximum flow in a network.


Conclusion----------------------------------

   Depth-First Search and Breadth-First Search (BFS) are used to traverse the graph or
   tree. We implemented Depth-First Search and Breadth-First Search (BFS) in python for
   searching all the vertices of a graph or tree data structure
==================================================================================================